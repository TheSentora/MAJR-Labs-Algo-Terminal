{
    "name": "LiquidBurnApp",
    "structs": {},
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id"
                },
                {
                    "type": "address",
                    "name": "admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "desc": "Run on app creation to configure the burn asset and admin account.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fund",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Increase the reward pool by pairing this call with a payment transaction.\nExpected group: [payment from admin -> app], [app call to `fund`]",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "burn",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Record a burn by pairing this call with an ASA transfer into the contract.\nExpected group: [asset transfer of `amount` to app], [app call to `burn`] Returns the caller's new share balance.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claim",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Redeem accumulated rewards proportional to the caller's shares.\nReturns the payout amount in microalgos.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Liquid burn contract that tracks burned ASA and distributes Algo rewards.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 5,
                "bytes": 1
            },
            "local": {
                "ints": 1,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        93
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        169
                    ],
                    "errorMessage": "already initialized"
                },
                {
                    "pc": [
                        309
                    ],
                    "errorMessage": "asset id does not match initialized burn asset"
                },
                {
                    "pc": [
                        299
                    ],
                    "errorMessage": "asset must be sent to the app account"
                },
                {
                    "pc": [
                        292
                    ],
                    "errorMessage": "asset sender must match app caller"
                },
                {
                    "pc": [
                        315
                    ],
                    "errorMessage": "asset transfer amount mismatch"
                },
                {
                    "pc": [
                        271
                    ],
                    "errorMessage": "burn amount must be positive"
                },
                {
                    "pc": [
                        274
                    ],
                    "errorMessage": "burn must follow an asset transfer"
                },
                {
                    "pc": [
                        204,
                        241,
                        307,
                        337,
                        348,
                        378,
                        384,
                        404
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        269
                    ],
                    "errorMessage": "contract not initialized"
                },
                {
                    "pc": [
                        213
                    ],
                    "errorMessage": "fund must follow a payment transfer"
                },
                {
                    "pc": [
                        237
                    ],
                    "errorMessage": "funding payment must come from admin"
                },
                {
                    "pc": [
                        230
                    ],
                    "errorMessage": "funding payment must target the app account"
                },
                {
                    "pc": [
                        149,
                        258
                    ],
                    "errorMessage": "invalid number of bytes for uint64"
                },
                {
                    "pc": [
                        159
                    ],
                    "errorMessage": "invalid number of bytes for uint8[32]"
                },
                {
                    "pc": [
                        380
                    ],
                    "errorMessage": "no outstanding shares"
                },
                {
                    "pc": [
                        374
                    ],
                    "errorMessage": "no shares to claim"
                },
                {
                    "pc": [
                        210
                    ],
                    "errorMessage": "only admin can fund rewards"
                },
                {
                    "pc": [
                        175
                    ],
                    "errorMessage": "only creator can initialize"
                },
                {
                    "pc": [
                        393
                    ],
                    "errorMessage": "reward pool too small to claim"
                },
                {
                    "pc": [
                        285
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        223
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyADAAEIJggMdG90YWxfc2hhcmVzC3Jld2FyZF9wb29sBnNoYXJlcw5pc19pbml0aWFsaXplZAx0b3RhbF9idXJuZWQKYnVybl9hc3NldAVhZG1pbgQVH3x1MRkURDEYQQAdggME6Ykr7wQLD0WhBMyCq5k2GgCOAwBJAHwA7QCABIbi4wM2GgCOAQABADYaAUkVJBJEFzYaAkkVgSASRCIrZSJOAk0jE0QxADIJEkQnBU8CZycGTGcrI2cnBCJnKCJnKSJnI0MiJwZlRDEASwESRDEWRDEWIwlJOBAjEkRJOAcyChJESTgATwISRCIpZURMOAgIKUxnI0M2GgFJFSQSRBciK2UiTgJNIxJESUQxFkQxFiMJSTgQgQQSREk4ADEAEkRJOBQyChJESTgRIicFZUQSRDgSSwESRDEAIipjIk4CTUsBCDEAKksCZiIoZURLAggoTGciJwRlRE8CCCcETGcWJwdMULAjQzEAIipjIk4CTUlEIihlRElEIillRElLAwtPAgpJRExLAQkpTGciKGVETwIJKExnMQAqaLExALIHSbIII7IQIrIBsxYnB0xQsCND",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 2,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}